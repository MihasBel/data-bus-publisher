// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rep/consumer_creator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockConsumerCreator is a mock of ConsumerCreator interface.
type MockConsumerCreator struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerCreatorMockRecorder
}

// MockConsumerCreatorMockRecorder is the mock recorder for MockConsumerCreator.
type MockConsumerCreatorMockRecorder struct {
	mock *MockConsumerCreator
}

// NewMockConsumerCreator creates a new mock instance.
func NewMockConsumerCreator(ctrl *gomock.Controller) *MockConsumerCreator {
	mock := &MockConsumerCreator{ctrl: ctrl}
	mock.recorder = &MockConsumerCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerCreator) EXPECT() *MockConsumerCreatorMockRecorder {
	return m.recorder
}

// NewConsumer mocks base method.
func (m *MockConsumerCreator) NewConsumer(arg0 *kafka.ConfigMap) (*kafka.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsumer", arg0)
	ret0, _ := ret[0].(*kafka.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConsumer indicates an expected call of NewConsumer.
func (mr *MockConsumerCreatorMockRecorder) NewConsumer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsumer", reflect.TypeOf((*MockConsumerCreator)(nil).NewConsumer), arg0)
}
